# deblur_table$sequence <- deblur_seqs[deblur_table$id]  # add sequences to table
# deblur_seqs <- deblur_seqs[deblur_table$id]
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
dada2_table2 <- load_dada2(dada2_otu_file)
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
dada2_table2 <- load_dada2(dada2_otu_file)
dada2_table <- read.table(file = file.path(result_path, "dada2/sv_table.no_chim.txt"), header = TRUE, sep = "\t")
dada2_table <- data.frame(t(dada2_table))
dada2_table <- as.tibble(rownames_to_column(dada2_table, var = "id"))
dada2_seqs <- dada2_table$id
names(dada2_seqs) <- paste0("ASV_", 1:length(dada2_seqs))
dada2_table$id <- names(dada2_seqs)
dada2_table <- dada2_table[apply(dada2_table[, sample_names], 1, max) > 1, ]  # remove singletons
dada2_table
write_tsv(dada2_table, file.path(result_path, "dada2/dada2_table.txt"))
dada2_table$sequence <- dada2_seqs[dada2_table$id]  # add sequences to table
dada2_seqs <- dada2_seqs[dada2_table$id]
dada2_table
dada2_table2
identical(dada2_table, dada2_table2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setup
library(dada2)
library(stringr)
library(Biostrings)
library(tidyverse)
library(ShortRead)
options(tibble.print_min = 100, tibble.print_max = 40)
result_path <- "~/thesis/results/zymo_neat"
ref_path <- "~/thesis/references"
analysis_path <- "~/thesis/analysis/zymo_neat"
script_path <- "~/thesis/noisy-microbes/scripts"
source(file.path(script_path, "seq_table_processing.R"))
if (!file_test("-d", analysis_path)) dir.create(analysis_path)
# Chunk 3: load UCLUST
# load UCLUST table
uclust_otu_file <- file.path(result_path, "uclust/otu_table.txt")
uclust_seqs_file <- file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta")
uclust_table <- load_uclust(uclust_otu_file, uclust_seqs_file)
# uclust_table <- as.tibble(read.table(file = file.path(result_path, "uclust/otu_table.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(uclust_table)[1] <- "id"
# uclust_table$id <- str_replace(uclust_table$id, "denovo", "denovo_")
# sample_name <- colnames(uclust_table)[-1]
# uclust_table <- uclust_table %>% select(id, sample_name)
# uclust_table <- uclust_table[apply(uclust_table[, sample_name], 1, max) > 1, ]  # remove singletons
uclust_table
write_tsv(uclust_table %>% select(-sequence), file.path(result_path, "uclust/uclust_table.txt"))
sample_names <- colnames(uclust_table)[c(-1, -length(colnames(uclust_table)))]
# load UCLUST representative sequences
# uclust_seqs <- readDNAStringSet(file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta"))
# uclust_seqs <- as.character(uclust_seqs)
# names(uclust_seqs) <- sapply(str_split(names(uclust_seqs), " "), `[`, 1)
# names(uclust_seqs) <- str_replace(names(uclust_seqs), "denovo", "denovo_")
# uclust_table$sequence <- uclust_seqs[uclust_table$id]  # add sequences to table
# uclust_seqs <- uclust_seqs[uclust_table$id]
# Chunk 4: load UPARSE
# load UPARSE table
uparse_otu_file <- file.path(result_path, "uparse/otu_table.txt")
uparse_seqs_file <- file.path(result_path, "uparse/otus.fa")
uparse_table <- load_uparse(uparse_otu_file, uparse_seqs_file, sample_names = sample_names)
# uparse_table <- as.tibble(read.table(file = file.path(result_path, "uparse/otu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(uparse_table)[1] <- "id"
# uparse_table$id <- str_replace(uparse_table$id, "OTU", "OTU_")
# colnames(uparse_table)[-1] <- sample_name
# uparse_table <- uparse_table[apply(uparse_table[, sample_name], 1, max) > 1, ]  # remove singletons
uparse_table
write_tsv(uparse_table %>% select(-sequence), file.path(result_path, "uparse/uparse_table.txt"))
# load UPARSE representative sequences
# uparse_seqs <- readDNAStringSet(file.path(result_path, "uparse/otus.fa"))
# uparse_seqs <- as.character(uparse_seqs)
# names(uparse_seqs) <- str_replace(names(uparse_seqs), "OTU", "OTU_")
# uparse_table$sequence <- uparse_seqs[uparse_table$id]  # add sequences to table
# uparse_seqs <- uparse_seqs[uparse_table$id]
# Chunk 5: load UNOISE
# load UNOISE table
unoise_otu_file <- file.path(result_path, "unoise/zotu_table.txt")
unoise_seqs_file <- file.path(result_path, "unoise/zotus.fa")
unoise_table <- load_unoise(unoise_otu_file, unoise_seqs_file, sample_names = sample_names)
# unoise_table <- as.tibble(read.table(file = file.path(result_path, "unoise/zotu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(unoise_table)[1] <- "id"
# unoise_table$id <- str_replace(unoise_table$id, "OTU", "ZOTU_")
# colnames(unoise_table)[-1] <- sample_name
# unoise_table <- unoise_table[apply(unoise_table[, sample_name], 1, max) > 1, ]  # remove singletons
unoise_table
write_tsv(unoise_table %>% select(-sequence), file.path(result_path, "unoise/unoise_table.txt"))
# load UNOISE sequences
# unoise_seqs <- readDNAStringSet(file.path(result_path, "unoise/zotus.fa"))
# unoise_seqs <- as.character(unoise_seqs)
# names(unoise_seqs) <- sapply(names(unoise_seqs), FUN = str_replace, "OTU", "ZOTU_")
# unoise_table$sequence <- unoise_seqs[unoise_table$id]  # add sequences to table
# unoise_seqs <- unoise_seqs[unoise_table$id]
# Chunk 6: load MED
# load MED table
med_otu_file <- file.path(result_path, "med/MATRIX-COUNT.txt")
med_seqs_file <- file.path(result_path, "med/NODE-REPRESENTATIVES.fasta")
med_chimera_file <- file.path(result_path, "med/uchime/NODE-chimeras.fasta")
med_table <- load_med(med_otu_file, med_seqs_file, med_chimera_file)
#
# med_table <- read.table(file = file.path(result_path, "med/MATRIX-COUNT.txt"), header = TRUE, sep = "\t")
# row.names(med_table) <- med_table[, 1]
# med_table <- med_table[, -1]  # remove sample name column
# med_table <- data.frame(t(med_table))   # samples as columns
# med_table <- as.tibble(rownames_to_column(med_table, var = "id"))
# med_table$id <- str_replace(med_table$id, "X", "Node_")
med_table
# load MED sequences
# med_seqs <- readDNAStringSet(file.path(result_path, "med/NODE-REPRESENTATIVES.fasta"))
# med_seqs <- as.character(med_seqs)
# med_seqs <- sapply(med_seqs, FUN = str_replace, "-+", "")
# names(med_seqs) <- paste0("Node_", sapply(str_split(names(med_seqs), "\\|"), FUN = `[`, 1))  # remove size annotation
# remove chimeras from MED sequences
# DADA2 method
# med_seqtab <- t(med_table)
# colnames(med_seqtab) <- med_seqs
# med_seqtab.no_chim <- removeBimeraDenovo(med_seqtab)
# med_table.no_bim <- med_table[med_seqs %in% colnames(med_seqtab.no_chim), ]
# UCHIME method
# med_seqs.chimeras <- readDNAStringSet(file.path(result_path, "med/uchime/NODE-chimeras.fasta"))
# if (length(med_seqs.chimeras) > 0){
#   med_seqs.chimeras <- as.character(med_seqs.chimeras)
#   names(med_seqs.chimeras) <- paste0("Node_", sapply(str_split(names(med_seqs.chimeras), ";"), FUN = `[`, 1))
#   med_table <- med_table[!med_seqs %in% med_seqs.chimeras, ]
#   med_table
#   med_seqs <- med_seqs[!med_seqs %in% med_seqs.chimeras]
# }
#
# med_table <- med_table[apply(med_table[, sample_name], 1, max) > 1, ]  # remove singletons
write_tsv(med_table %>% select(-sequence), file.path(result_path, "med/med_table.txt"))
# med_table$sequence <- med_seqs[med_table$id]  # add sequences to table
# med_seqs <- med_seqs[med_table$id]
# Chunk 7: load Deblur table
# load Deblur table
deblur_otu_file <- file.path(result_path, "deblur/all.txt")
deblur_table <- load_deblur(deblur_otu_file)
# deblur_table <- as.tibble(read.table(file = file.path(result_path, "deblur/all.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(deblur_table)[1] <- "id"
# deblur_seqs <- toupper(deblur_table$id)
# names(deblur_seqs) <- paste0("sOTU_", 1:length(deblur_seqs))
# deblur_table$id <- names(deblur_seqs)
# deblur_table <- deblur_table %>% select(id, sample_names)
# deblur_table <- deblur_table[apply(deblur_table[, sample_names], 1, max) > 1, ]  # remove singletons
deblur_table
write_tsv(deblur_table %>% select(-sequence), file.path(result_path, "deblur/deblur_table.txt"))
# deblur_table$sequence <- deblur_seqs[deblur_table$id]  # add sequences to table
# deblur_seqs <- deblur_seqs[deblur_table$id]
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
dada2_table2 <- load_dada2(dada2_otu_file)
dada2_table <- read.table(file = file.path(result_path, "dada2/sv_table.no_chim.txt"), header = TRUE, sep = "\t")
colnames(dada2_table) <- sample_names
dada2_table <- as.tibble(rownames_to_column(dada2_table, var = "sequence"))
dada2_seqs <- dada2_table$sequence
names(dada2_seqs) <- paste0("ASV_", 1:length(dada2_seqs))
dada2_table$id <- names(dada2_seqs)
dada2_table <- dada2_table %>% select(-sequence, sequence)
dada2_table <- dada2_table[apply(dada2_table[, sample_names], 1, max) > 1, ]  # remove singletons
dada2_seqs <- dada2_seqs[dada2_table$id]
dada2_table
write_tsv(dada2_table %>% select(-sequence), file.path(result_path, "dada2/dada2_table.txt"))
identical(dada2_table, dada2_table2)
dada2_table
dada2_table2
otu_file_path <- dada2_otu_file
dada2_table <- read.table(file = otu_file_path, header = TRUE, sep = "\t")
dada2_table
length(dada2_table)
library(dada2)
library(stringr)
library(Biostrings)
library(tidyverse)
library(ShortRead)
options(tibble.print_min = 10, tibble.print_max = 40)
# options(tibble.width = Inf)
data_path <- "~/thesis/data/dilution"
result_path <- "~/thesis/results/dilution"
ref_path <- "~/thesis/references"
analysis_path <- "~/thesis/analysis/dilution"
script_path <- "~/thesis/noisy-microbes/scripts"
source(file.path(script_path, "seq_table_processing.R"))
if (!file_test("-d", analysis_path)) dir.create(analysis_path)
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
otu_file_path <- dada2_otu_file
dada2_table <- read.table(file = otu_file_path, header = TRUE, sep = "\t")
length(dada2_table)
?ifelse
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setup
library(dada2)
library(stringr)
library(Biostrings)
library(tidyverse)
library(ShortRead)
options(tibble.print_min = 10, tibble.print_max = 40)
# options(tibble.width = Inf)
data_path <- "~/thesis/data/dilution"
result_path <- "~/thesis/results/dilution"
ref_path <- "~/thesis/references"
analysis_path <- "~/thesis/analysis/dilution"
script_path <- "~/thesis/noisy-microbes/scripts"
source(file.path(script_path, "seq_table_processing.R"))
if (!file_test("-d", analysis_path)) dir.create(analysis_path)
# Chunk 3: load UCLUST
# load UCLUST table
uclust_otu_file <- file.path(result_path, "uclust/otu_table.txt")
uclust_seqs_file <- file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta")
uclust_table <- load_uclust(uclust_otu_file, uclust_seqs_file)
# uclust_table <- as.tibble(read.table(file = file.path(result_path, "uclust/otu_table.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(uclust_table)[1] <- "id"
# uclust_table$id <- str_replace(uclust_table$id, "denovo", "denovo_")  # make ids more readable
# sample_names <- colnames(uclust_table)[-1]  # get the sample names, which will be used for all tables for consistency
# sample_names <- sample_names[order(sample_names)]
# uclust_table <- uclust_table %>% select(id, sample_names)
# uclust_table <- uclust_table[apply(uclust_table[, sample_names], 1, max) > 1, ]  # remove singletons
uclust_table
write_tsv(uclust_table %>% select(-sequence), file.path(result_path, "uclust/uclust_table.txt"))
sample_names <- colnames(uclust_table)[c(-1, -length(colnames(uclust_table)))]
# load UCLUST representative sequences
# uclust_seqs <- readDNAStringSet(file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta"))
# uclust_seqs <- as.character(uclust_seqs)
# names(uclust_seqs) <- sapply(str_split(names(uclust_seqs), " "), `[`, 1)  # remove annotation from names
# names(uclust_seqs) <- str_replace(names(uclust_seqs), "denovo", "denovo_")  # modify names to match table ids
# uclust_table$sequence <- uclust_seqs[uclust_table$id]  # add sequences to table
# uclust_seqs <- uclust_seqs[uclust_table$id]
# Chunk 4: load UPARSE
# load UPARSE table
uparse_otu_file <- file.path(result_path, "uparse/otu_table.txt")
uparse_seqs_file <- file.path(result_path, "uparse/otus.fa")
uparse_table <- load_uparse(uparse_otu_file, uparse_seqs_file, sample_names = sample_names)
# uparse_table <- as.tibble(read.table(file = file.path(result_path, "uparse/otu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(uparse_table)[1] <- "id"
# uparse_table$id <- str_replace(uparse_table$id, "OTU", "OTU_")
# colnames(uparse_table)[-1] <- sample_names  # make sample names match UCLUST table
# uparse_table <- uparse_table[apply(uparse_table[, sample_names], 1, max) > 1, ]  # remove singletons
uparse_table
write_tsv(uparse_table %>% select(-sequence), file.path(result_path, "uparse/uparse_table.txt"))
# load UPARSE representative sequences
# uparse_seqs <- readDNAStringSet(file.path(result_path, "uparse/otus.fa"))
# uparse_seqs <- as.character(uparse_seqs)
# names(uparse_seqs) <- str_replace(names(uparse_seqs), "OTU", "OTU_")
# uparse_table$sequence <- uparse_seqs[uparse_table$id]  # add sequences to table
# uparse_seqs <- uparse_seqs[uparse_table$id]
# Chunk 5: load UNOISE
# load UNOISE table
unoise_otu_file <- file.path(result_path, "unoise/zotu_table.txt")
unoise_seqs_file <- file.path(result_path, "unoise/zotus.fa")
unoise_table <- load_unoise(unoise_otu_file, unoise_seqs_file, sample_names = sample_names)
# unoise_table <- as.tibble(read.table(file = file.path(result_path, "unoise/zotu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(unoise_table)[1] <- "id"
# unoise_table$id <- str_replace(unoise_table$id, "OTU", "ZOTU_")
# colnames(unoise_table)[-1] <- sample_names
# unoise_table <- unoise_table[apply(unoise_table[, sample_names], 1, max) > 1, ]  # remove singletons
unoise_table
write_tsv(unoise_table %>% select(-sequence), file.path(result_path, "unoise/unoise_table.txt"))
# load UNOISE sequences
# unoise_seqs <- readDNAStringSet(file.path(result_path, "unoise/zotus.fa"))
# unoise_seqs <- as.character(unoise_seqs)
# names(unoise_seqs) <- sapply(names(unoise_seqs), FUN = str_replace, "OTU", "ZOTU_")
# unoise_table$sequence <- unoise_seqs[unoise_table$id]  # add sequences to table
# unoise_seqs <- unoise_seqs[unoise_table$id]
# Chunk 6: load MED
# load MED table
med_otu_file <- file.path(result_path, "med/MATRIX-COUNT.txt")
med_seqs_file <- file.path(result_path, "med/NODE-REPRESENTATIVES.fasta")
med_chimera_file <- file.path(result_path, "med/uchime/NODE-chimeras.fasta")
med_table <- load_med(med_otu_file, med_seqs_file, med_chimera_file)
# med_table <- read.table(file = file.path(result_path, "med/MATRIX-COUNT.txt"), header = TRUE, sep = "\t")
# row.names(med_table) <- med_table[, 1]
# med_table <- med_table[, -1]  # remove sample name column
# med_table <- data.frame(t(med_table))   # samples as columns
# med_table <- as.tibble(rownames_to_column(med_table, var = "id"))
# med_table$id <- str_replace(med_table$id, "X", "Node_")
med_table
# load MED sequences
# med_seqs <- readDNAStringSet(file.path(result_path, "med/NODE-REPRESENTATIVES.fasta"))
# med_seqs <- as.character(med_seqs)
# med_seqs <- sapply(med_seqs, FUN = str_replace, "-+", "")
# names(med_seqs) <- paste0("Node_", sapply(str_split(names(med_seqs), "\\|"), FUN = `[`, 1))  # remove size annotation
# remove chimeras from MED sequences with DADA2 method
# DADA2 method
# med_seqtab <- t(med_table)
# colnames(med_seqtab) <- med_seqs
# med_seqtab.no_chim <- removeBimeraDenovo(med_seqtab)
# med_table.no_bim <- med_table[med_seqs %in% colnames(med_seqtab.no_chim), ]
# remove chimeras detected with UCHIME method
# med_seqs.chimeras <- readDNAStringSet(file.path(result_path, "med/uchime/NODE-chimeras.fasta"))
# if (length(med_seqs.chimeras) > 0){
#   med_seqs.chimeras <- as.character(med_seqs.chimeras)
#   names(med_seqs.chimeras) <- paste0("Node_", sapply(str_split(names(med_seqs.chimeras), ";"), FUN = `[`, 1))
#   med_table <- med_table[!med_seqs %in% med_seqs.chimeras, ]
#   med_table
#   med_seqs <- med_seqs[!med_seqs %in% med_seqs.chimeras]
# }
#
# med_table <- med_table[apply(med_table[, sample_names], 1, max) > 1, ]  # remove singletons
write_tsv(med_table %>% select(-sequence), file.path(result_path, "med/med_table.txt"))
# med_table$sequence <- med_seqs[med_table$id]  # add sequences to table
# med_seqs <- med_seqs[med_table$id]
# Chunk 7: load Deblur table
# load Deblur table
deblur_otu_file <- file.path(result_path, "deblur/all.txt")
deblur_table <- load_deblur(deblur_otu_file)
# deblur_table <- as.tibble(read.table(file = file.path(result_path, "deblur/all.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(deblur_table)[1] <- "id"
# deblur_seqs <- toupper(deblur_table$id)
# names(deblur_seqs) <- paste0("sOTU_", 1:length(deblur_seqs))
# deblur_table$id <- names(deblur_seqs)
# deblur_table <- deblur_table %>% select(id, sample_names)
# deblur_table <- deblur_table[apply(deblur_table[, sample_names], 1, max) > 1, ]  # remove singletons
deblur_table
write_tsv(deblur_table %>% select(-sequence), file.path(result_path, "deblur/deblur_table.txt"))
# deblur_table$sequence <- deblur_seqs[deblur_table$id]  # add sequences to table
# deblur_seqs <- deblur_seqs[deblur_table$id]
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
dada2_table2 <- load_dada2(dada2_otu_file)
dada2_table <- read.table(file = file.path(result_path, "dada2/sv_table.no_chim.txt"), header = TRUE, sep = "\t")
dada2_table <- data.frame(t(dada2_table))
dada2_table <- as.tibble(rownames_to_column(dada2_table, var = "id"))
dada2_seqs <- dada2_table$id
names(dada2_seqs) <- paste0("ASV_", 1:length(dada2_seqs))
dada2_table$id <- names(dada2_seqs)
dada2_table <- dada2_table[apply(dada2_table[, sample_names], 1, max) > 1, ]  # remove singletons
dada2_table
write_tsv(dada2_table %>% select(-sequence), file.path(result_path, "dada2/dada2_table.txt"))
dada2_table$sequence <- dada2_seqs[dada2_table$id]  # add sequences to table
dada2_seqs <- dada2_seqs[dada2_table$id]
identical(dada2_table, dada2_table2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setup
library(dada2)
library(stringr)
library(Biostrings)
library(tidyverse)
library(ShortRead)
options(tibble.print_min = 100, tibble.print_max = 40)
result_path <- "~/thesis/results/zymo_neat"
ref_path <- "~/thesis/references"
analysis_path <- "~/thesis/analysis/zymo_neat"
script_path <- "~/thesis/noisy-microbes/scripts"
source(file.path(script_path, "seq_table_processing.R"))
if (!file_test("-d", analysis_path)) dir.create(analysis_path)
# Chunk 3: load UCLUST
# load UCLUST table
uclust_otu_file <- file.path(result_path, "uclust/otu_table.txt")
uclust_seqs_file <- file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta")
uclust_table <- load_uclust(uclust_otu_file, uclust_seqs_file)
# uclust_table <- as.tibble(read.table(file = file.path(result_path, "uclust/otu_table.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(uclust_table)[1] <- "id"
# uclust_table$id <- str_replace(uclust_table$id, "denovo", "denovo_")
# sample_name <- colnames(uclust_table)[-1]
# uclust_table <- uclust_table %>% select(id, sample_name)
# uclust_table <- uclust_table[apply(uclust_table[, sample_name], 1, max) > 1, ]  # remove singletons
uclust_table
write_tsv(uclust_table %>% select(-sequence), file.path(result_path, "uclust/uclust_table.txt"))
sample_names <- colnames(uclust_table)[c(-1, -length(colnames(uclust_table)))]
# load UCLUST representative sequences
# uclust_seqs <- readDNAStringSet(file.path(result_path, "uclust/rep_set/pooled_nochim_rep_set.fasta"))
# uclust_seqs <- as.character(uclust_seqs)
# names(uclust_seqs) <- sapply(str_split(names(uclust_seqs), " "), `[`, 1)
# names(uclust_seqs) <- str_replace(names(uclust_seqs), "denovo", "denovo_")
# uclust_table$sequence <- uclust_seqs[uclust_table$id]  # add sequences to table
# uclust_seqs <- uclust_seqs[uclust_table$id]
# Chunk 4: load UPARSE
# load UPARSE table
uparse_otu_file <- file.path(result_path, "uparse/otu_table.txt")
uparse_seqs_file <- file.path(result_path, "uparse/otus.fa")
uparse_table <- load_uparse(uparse_otu_file, uparse_seqs_file, sample_names = sample_names)
# uparse_table <- as.tibble(read.table(file = file.path(result_path, "uparse/otu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(uparse_table)[1] <- "id"
# uparse_table$id <- str_replace(uparse_table$id, "OTU", "OTU_")
# colnames(uparse_table)[-1] <- sample_name
# uparse_table <- uparse_table[apply(uparse_table[, sample_name], 1, max) > 1, ]  # remove singletons
uparse_table
write_tsv(uparse_table %>% select(-sequence), file.path(result_path, "uparse/uparse_table.txt"))
# load UPARSE representative sequences
# uparse_seqs <- readDNAStringSet(file.path(result_path, "uparse/otus.fa"))
# uparse_seqs <- as.character(uparse_seqs)
# names(uparse_seqs) <- str_replace(names(uparse_seqs), "OTU", "OTU_")
# uparse_table$sequence <- uparse_seqs[uparse_table$id]  # add sequences to table
# uparse_seqs <- uparse_seqs[uparse_table$id]
# Chunk 5: load UNOISE
# load UNOISE table
unoise_otu_file <- file.path(result_path, "unoise/zotu_table.txt")
unoise_seqs_file <- file.path(result_path, "unoise/zotus.fa")
unoise_table <- load_unoise(unoise_otu_file, unoise_seqs_file, sample_names = sample_names)
# unoise_table <- as.tibble(read.table(file = file.path(result_path, "unoise/zotu_table.txt"), header = TRUE, sep = "\t",
#                                      comment.char = ""))
# colnames(unoise_table)[1] <- "id"
# unoise_table$id <- str_replace(unoise_table$id, "OTU", "ZOTU_")
# colnames(unoise_table)[-1] <- sample_name
# unoise_table <- unoise_table[apply(unoise_table[, sample_name], 1, max) > 1, ]  # remove singletons
unoise_table
write_tsv(unoise_table %>% select(-sequence), file.path(result_path, "unoise/unoise_table.txt"))
# load UNOISE sequences
# unoise_seqs <- readDNAStringSet(file.path(result_path, "unoise/zotus.fa"))
# unoise_seqs <- as.character(unoise_seqs)
# names(unoise_seqs) <- sapply(names(unoise_seqs), FUN = str_replace, "OTU", "ZOTU_")
# unoise_table$sequence <- unoise_seqs[unoise_table$id]  # add sequences to table
# unoise_seqs <- unoise_seqs[unoise_table$id]
# Chunk 6: load MED
# load MED table
med_otu_file <- file.path(result_path, "med/MATRIX-COUNT.txt")
med_seqs_file <- file.path(result_path, "med/NODE-REPRESENTATIVES.fasta")
med_chimera_file <- file.path(result_path, "med/uchime/NODE-chimeras.fasta")
med_table <- load_med(med_otu_file, med_seqs_file, med_chimera_file)
#
# med_table <- read.table(file = file.path(result_path, "med/MATRIX-COUNT.txt"), header = TRUE, sep = "\t")
# row.names(med_table) <- med_table[, 1]
# med_table <- med_table[, -1]  # remove sample name column
# med_table <- data.frame(t(med_table))   # samples as columns
# med_table <- as.tibble(rownames_to_column(med_table, var = "id"))
# med_table$id <- str_replace(med_table$id, "X", "Node_")
med_table
# load MED sequences
# med_seqs <- readDNAStringSet(file.path(result_path, "med/NODE-REPRESENTATIVES.fasta"))
# med_seqs <- as.character(med_seqs)
# med_seqs <- sapply(med_seqs, FUN = str_replace, "-+", "")
# names(med_seqs) <- paste0("Node_", sapply(str_split(names(med_seqs), "\\|"), FUN = `[`, 1))  # remove size annotation
# remove chimeras from MED sequences
# DADA2 method
# med_seqtab <- t(med_table)
# colnames(med_seqtab) <- med_seqs
# med_seqtab.no_chim <- removeBimeraDenovo(med_seqtab)
# med_table.no_bim <- med_table[med_seqs %in% colnames(med_seqtab.no_chim), ]
# UCHIME method
# med_seqs.chimeras <- readDNAStringSet(file.path(result_path, "med/uchime/NODE-chimeras.fasta"))
# if (length(med_seqs.chimeras) > 0){
#   med_seqs.chimeras <- as.character(med_seqs.chimeras)
#   names(med_seqs.chimeras) <- paste0("Node_", sapply(str_split(names(med_seqs.chimeras), ";"), FUN = `[`, 1))
#   med_table <- med_table[!med_seqs %in% med_seqs.chimeras, ]
#   med_table
#   med_seqs <- med_seqs[!med_seqs %in% med_seqs.chimeras]
# }
#
# med_table <- med_table[apply(med_table[, sample_name], 1, max) > 1, ]  # remove singletons
write_tsv(med_table %>% select(-sequence), file.path(result_path, "med/med_table.txt"))
# med_table$sequence <- med_seqs[med_table$id]  # add sequences to table
# med_seqs <- med_seqs[med_table$id]
# Chunk 7: load Deblur table
# load Deblur table
deblur_otu_file <- file.path(result_path, "deblur/all.txt")
deblur_table <- load_deblur(deblur_otu_file)
# deblur_table <- as.tibble(read.table(file = file.path(result_path, "deblur/all.txt"), header = TRUE, sep = "\t",
#                                      skip = 1, comment.char = ""))
# colnames(deblur_table)[1] <- "id"
# deblur_seqs <- toupper(deblur_table$id)
# names(deblur_seqs) <- paste0("sOTU_", 1:length(deblur_seqs))
# deblur_table$id <- names(deblur_seqs)
# deblur_table <- deblur_table %>% select(id, sample_names)
# deblur_table <- deblur_table[apply(deblur_table[, sample_names], 1, max) > 1, ]  # remove singletons
deblur_table
write_tsv(deblur_table %>% select(-sequence), file.path(result_path, "deblur/deblur_table.txt"))
# deblur_table$sequence <- deblur_seqs[deblur_table$id]  # add sequences to table
# deblur_seqs <- deblur_seqs[deblur_table$id]
# load DADA2 table
dada2_otu_file <- file.path(result_path, "dada2/sv_table.no_chim.txt")
dada2_table2 <- load_dada2(dada2_otu_file)
dada2_table <- read.table(file = file.path(result_path, "dada2/sv_table.no_chim.txt"), header = TRUE, sep = "\t")
colnames(dada2_table) <- sample_names
dada2_table <- as.tibble(rownames_to_column(dada2_table, var = "sequence"))
dada2_seqs <- dada2_table$sequence
names(dada2_seqs) <- paste0("ASV_", 1:length(dada2_seqs))
dada2_table$id <- names(dada2_seqs)
dada2_table <- dada2_table %>% select(-sequence, sequence)
dada2_table <- dada2_table[apply(dada2_table[, sample_names], 1, max) > 1, ]  # remove singletons
dada2_seqs <- dada2_seqs[dada2_table$id]
dada2_table
write_tsv(dada2_table %>% select(-sequence), file.path(result_path, "dada2/dada2_table.txt"))
identical(dada2_table, dada2_table2)
dada2_table2
dada2_table2 <- load_dada2(dada2_otu_file, sample_names = sample_names)
identical(dada2_table, dada2_table2)
dada2_table
dada2_table2
dada2_table <- dada2_table <- select(id, sample_names, sequence)
dada2_table
sample_names
dada2_table <- dada2_table <- select(id, sample_names, sequence)
dada2_table <- dada2_table %>% select(id, sample_names, sequence)
identical(dada2_table, dada2_table2)
load("~/thesis/analysis/damore_uneven/damore_uneven.RData")
library(dada2)
library(stringr)
library(Biostrings)
library(tidyverse)
library(ShortRead)
options(tibble.print_min = 100, tibble.print_max = 40)
result_path <- "~/thesis/results/damore_uneven"
ref_path <- "~/thesis/references"
analysis_path <- "~/thesis/analysis/damore_uneven"
script_path <- "~/thesis/noisy-microbes/scripts"
plot_path <- "~/thesis/analysis/plots"
source(file.path(script_path, "seq_table_processing.R"))
if (!file_test("-d", analysis_path)) dir.create(analysis_path)
all_table <- annotate_inter_dist(all_table, noisy_to_contam, dist_to_contam)
all_table <- annotate_inter_dist(all_table, contam_to_contam, dist_to_contam)
